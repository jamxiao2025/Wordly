# -*- coding: utf-8 -*-
"""WordleProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QhGNjeeSZAafqnIsL8vISNPM2ue6AnCR
"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({'id':'14VdLv62YGnl4oNsrIlaUjDgbj1jWICQ0'}) # replace the id with id of file you want to access
downloaded.GetContentFile('wordle.txt')

#we will define a data set, and have our program randomly select a word from the set to be the wordle"
#import text file and read it with python
import random
class Wordle():
  words = []
  keyword = ""
  def __init__(self):
    print("Setting up Wordle...")

  def fileSetup(self, filepath):
    with open(filepath) as f:
      lines = f.readlines()
    for line in lines:
      line = line.strip('\n')
      Wordle.words.append(line)
  def selectWord(self):
    Wordle.keyword = Wordle.words[random.randint(0,len(Wordle.words))]

wordle = Wordle()
wordle.fileSetup("wordle.txt")
print(wordle.words)
wordle.selectWord()
print(wordle.keyword)

class my_dictionary(dict):
  
    # __init__ function
    def __init__(self):
        self = dict()
          
    # Function to add key:value
    def add(self, key, value):
        self[key] = value
  


hashtable = my_dictionary()
for letter in wordle.keyword:
  hashtable.add(hash(letter), letter)

print(hashtable)

#make class for guess: so it has attributes for the letter status?
#how do you make an object initializer for a class 
class userGuess():
  def __init__(self):
    #self.attributes = attributes
    self.guess = []
    self.lucas = input("Guess a word")
    self.lucas = self.lucas.lower()
    for i in range(len(self.lucas)):
      a = letter(self.lucas[i])
      self.guess.append(a)
  def results(self):
    for letter in self.guess:
      if(letter.inWord == True):
        if(letter.rightSpot == True):
          print(letter.value + " is in the right spot")
        else:
          print(letter.value + " is in the word")
      else:
        print(letter.value + "is not in the word")
  
    
  
  #yo lucas, so i want to input a word, then turn each letter in the word into a letter object 

class letter():
  def __init__(self, letter):
    self.value = letter
    self.inWord = False
    self.rightSpot = False
  
  #like can i make a variable called inWord and set it to true/false
  
  #how do you make boolean attributes



  

word = userGuess()
for letter in word.guess:
  print(letter)

for i in range(5):
  #first see if letter is even in the word
  a = (hashtable.get(hash(word.guess[i].value)))

  #if(hashtable.get(hash(word.guess[i].value is not None))):
  if a is not None:
    word.guess[i].inWord = True
    if(word.guess[i].value==wordle.keyword[i]):
        word.guess[i].rightSpot = True
  else:
    word.guess[i].inWord = False

if(hashtable.get(hash('c')) is not None):
  print("hello")

word.results()